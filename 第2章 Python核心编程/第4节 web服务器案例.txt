                              01.Web服务器案例-1
网络层复习:
链路层---->网络层---->传输层---->应用层

应用层:解决要传输什么数据
传输层:解决如何传输数据udp tcp--->可以理解为快递公司
网络层:IP 可以理解为地理位置坐标
链路层:具体的传输工具
******************************************************************************************
socket编程复习:
udpSocket = socket(AF_INET,SOCK_DGRAM)
tcpSocket = socket(AF_INET,SOCK_STREAM)
DGRAM翻译过来就是数据包:因为udp将数据发过去没有一个互相确认的机制
STREAM翻译过来就是流:而tcp将数据传过去会有互相确认的机制

服务器:
serSocket = socket()
serSocket.bind(("ip",port))
serSocket.listen(num)
newSocket,destAddr = serSocket.accept()
serScoket.send()
serSocket.recv()

客户端:
cliSocket = socket()
cliSocket.connect()
cliSocket.send()
cliSocket.recv()
cliSocket.close()
说明:客户端连接服务器时操作系统底层开始了三次握手，客户端调用close()时底层进行了四次挥手
******************************************************************************************
前端引入
HTML:超文本标记语言(index.html)
CSS:样式 (index.css)
JavaScript:前端脚本语言  
在windows电脑上新建一个docx的文档，里面写入内容和标题，然后保存xxx.docx文档，再将该文档的后缀改为xxx.rar，然后解压后里面就有很多文件
<h1>你好</h1>
<h2>这里是传智播客</h2>
<p>欢迎光临</p>
****************************************
标准格式
<!DOCTYPE html>
<html>
<head>
	<title>ITCAST</title>------标题
</head>
<body>
Hello World                  ------内容
<p>Hi~~~</p>
</body>
</html>
****************************************
HTML和CSS以及JavaScript混合
<!DOCTYPE html>
<html>
<head>
	<title>ITCAST</title>
</head>
<body>
<h1 style="color: red">Hello World</h1>
<p>Hi~~~</p>
<script type="text/javascript">
	alert("hello");
</script>
</body>
</html>
******************************************************************************************
打开谷歌浏览器按F12出现开发者选项界面
说明:Elements显示网页的结构，Network显示浏览器和服务器的通信
HTTP协议:超文本传输协议
HTTP请求方式:
GET:获取数据
POST:修改数据
PUT:保存数据
DELETE:删除
OPTION:询问服务器的某种支持特性
HEAD:返回报文头
对于HTTP的换行符是:\r\n来代表换行的
对于一个请求来说: 分为起始行---请求头---请求体(用来传数据的)
******************************************************************************************
URI:全局资源标示
URL:全局资源定位  L：location
URN:全局资源名字  N：name
Query String :查询字符串(https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=0&rsv_idx=1&tn=baidu&wd=abc&rsv_pq=fe65a86200048cbf&rsv_t=f0eeVoNyv3IfgVSbUj0AlYMbP%2FbKQ7qUBSuW10iwRJm8xQaJakyzwXAasBc&rqlang=cn&rsv_enter=1&rsv_sug3=4&rsv_sug1=4&rsv_sug7=101&rsv_sug2=0&inputT=1109&rsv_sug4=1785)
?问好后面的都是查询字符串
?key1=value1&key2=value2&key3=value3

实际上HTTP协议是无状态的，因为当同一个人给服务器发了两次请求，对于服务器来说并不知道这两次请求都是同一个人发的
因为HTTP没有状态，所以需要找到别的方式来解决记录状态的东西
******************************************************************************************
linux,unix,mac都是\n为换行
而widows比较特殊是以\r\n来换行
******************************************************************************************
服务器动态资源请求
WSGI
WSGI允许开发者将选择web框架和web服务器分开。可以混合匹配web服务器和web框架，选择一个适合的配对。比如,可以在Gunicorn 或者 Nginx/uWSGI 或者 Waitress上运行 Django, Flask, 或 Pyramid。真正的混合匹配，得益于WSGI同时支持服务器和架构
定义WSGI接口
WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello World!”：

def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    return 'Hello World!'






































































































































































































































































































































































































































































































