算法的提出
算法的概念
算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务。一般地，当算法在处理信息时，会从输入设备或数据的存储地址读取数据，把结果写入输出设备或某个存储地址供以后再调用。

算法是独立存在的一种解决问题的方法和思想。

对于算法而言，实现的语言并不重要，重要的是思想。

算法可以有不同的语言描述实现版本（如C描述、C++描述、Python描述等），我们现在是在用Python语言进行描述实现。

算法的五大特性
1.输入: 算法具有0个或多个输入
2.输出: 算法至少有1个或多个输出
3.有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成
4.确定性：算法中的每一步都有确定的含义，不会出现二义性
5.可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成
******************************************************************************************
时间复杂度与“大O记法”
“大O记法”：对于单调的整数函数f，如果存在一个整数函数g和实常数c>0，使得对于充分大的n总有f(n)<=c*g(n)，就说函数g是f的一个渐近函数（忽略常数），记为f(n)=O(g(n))。也就是说，在趋向无穷的极限意义下，函数f的增长速度受到函数g的约束，亦即函数f与函数g的特征相似。

时间复杂度：假设存在函数g，使得算法A处理规模为n的问题示例所用时间为T(n)=O(g(n))，则称O(g(n))为算法A的渐近时间复杂度，简称时间复杂度，记为T(n)
******************************************************************************************
分析算法时，存在几种可能的考虑：
算法完成工作最少需要多少基本操作，即最优时间复杂度
算法完成工作最多需要多少基本操作，即最坏时间复杂度
算法完成工作平均需要多少基本操作，即平均时间复杂度
******************************************************************************************
	时间复杂度的几条基本计算规则
1.基本操作，即只有常数项，认为其时间复杂度为O(1)
2.顺序结构，时间复杂度按加法进行计算
3.循环结构，时间复杂度按乘法进行计算
4.分支结构，时间复杂度取最大值
5.判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略
6.在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度
******************************************************************************************
******************************************************************************************
常见时间复杂度
执行次数函数举例	阶	    非正式术语
12	               O(1)	    常数阶
2n+3	               O(n)	    线性阶
3n2+2n+1	       O(n2)	    平方阶
5log2n+20	       O(logn)      对数阶
2n+3nlog2n+19	       O(nlogn)	    nlogn阶
6n3+2n2+3n+4	       O(n3)	    立方阶
2n		       O(2n)	    指数阶
注意，经常将log2n（以2为底的对数）简写成logn
******************************************************************************************
常见时间复杂度之间的关系

所消耗的时间从小到大

O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n) < O(n!) < O(nn)
******************************************************************************************
算法与数据结构的区别
数据结构只是静态的描述了数据元素之间的关系。

高效的程序需要在数据结构的基础上设计和选择算法。

程序 = 数据结构 + 算法

总结：算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体
******************************************************************************************
抽象数据类型(Abstract Data Type)
抽象数据类型(ADT)的含义是指一个数学模型以及定义在此数学模型上的一组操作。即把数据类型和数据类型上的运算捆在一起，进行封装。引入抽象数据类型的目的是把数据类型的表示和数据类型上运算的实现与这些数据类型和运算在程序中的引用隔开，使它们相互独立。

最常用的数据运算有五种：
1.插入
2.删除
3.修改
4.查找
5.排序
******************************************************************************************






