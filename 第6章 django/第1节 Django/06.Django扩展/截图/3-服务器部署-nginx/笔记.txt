nginx
使用nginx的作用
负载均衡：多台服务器轮流处理请求
反射代理：隐藏真实服务器
实现构架：客户端请求nginx，再由nginx请求uwsgi，运行django框架下的python代码
nginx+uwsgi也可以用于其它框架的python web代码，不限于django
1.到官网下载nginx压缩文件或通过命令安装
①sudo apt-get nginx(我这里无法使用改命令，直接去的官网下载的，进行源码安装)
②tar zxvf nginx-1.6.3.tar.gz
③进入nginx-1.6.3目录依次执行如下命令进行安装：
./configure
make
sudo make install
④默认安装到/usr/local/nginx目录，进入此目录执行命令
查看版本：sudo sbin/nginx -v
启动：sudo sbin/nginx
停止：sudo sbin/nginx -s stop
重启：sudo sbin/nginx -s reload
通过浏览器查看nginx运行结果
指向uwsgi项目：编辑conf/nginx.conf文件 
⑤查看配置文件sudo vi nginx.conf
将来我们如果想要nginx指向多个网站的话
只需配置server节点就可以了，server节点可以配置多个
1.listen:默认监听端口
2.server_name:服务器名字(随便改)
3.location:将来请求路径
4.在server下添加新的location项，指向uwsgi的ip与端口
location / {
    include uwsgi_params;将所有的参数转到uwsgi下
    uwsgi_pass uwsgi的ip与端口;
}

⑥修改uwsgi.ini文件，启动socket，禁用http
⑦启动uwsgi服务，再启动nginx服务，进入127.0.0.1:8080
在浏览器中查看项目，发现静态文件加载不正常
⑧配置nginx的静态项，打开conf/nginx.conf文件，找到server，添加新location
location /static {
    alias /var/www/test7/static/;
}
再去创建改路径下的目录，并授予文件夹777权限
sudo chmod 777 static
⑨修改settings.py文件，前面定义的路径相当于没用了
在开发环境有用
⑩收集所有静态文件到static_root指定目录：python manage.py collectstatic
重启nginx、uwsgi


请求过程：
浏览器--->服务器--->nginx--->uwsgi
所有的静态文件都会由nginx处理，不会将请求转到uwsgi



